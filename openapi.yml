openapi: 3.0.0
info:
  description: "This is the openAPI specification for PAM System."
  version: 1.0.1
  title: PAM API
  contact:
    email: gnupablo@protonmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: entities
    description: Operations related to entities
  - name: user
    description: Operations about user
servers:
  - url: https://pam.cortext.net/api/v1
paths:
  /entities:
    post:
      tags:
        - entities
      summary: Add a new entity with given input parameteres
      description: ""
      operationId: addEntity
      requestBody:
        $ref: "#/components/requestBodies/Entities"
      responses:
        "405":
          description: Invalid input
    put:
      tags:
        - entities
      summary: Update an existing entity
      description: ""
      operationId: updateEntity
      requestBody:
        $ref: "#/components/requestBodies/Entities"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Entity not found
        "405":
          description: Validation exception
  /entities/_link:
    get:
      tags:
        - entities
      summary: Link an external entity with risis datasets using its name
      description: This is the principal operation of PAM where it does the allocation of entities using their names and other filters.
      operationId: entityLinkage
      parameters:
        - name: name
          in: query
          description: Name value that need to be considered for the entity linkage
          required: true
          schema:
            type: string
        - name: verbose 
          in: query
          description: It provides additional information such as the scores caculated during the process
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - true
                - false
              default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entities"
        "400":
          description: Invalid status value
 
  "/entities/{entityId}":
    get:
      tags:
        - entities
      summary: Find entity by ID
      description: Returns a single entity
      operationId: getEntityById
      parameters:
        - name: entityId
          in: path
          description: Entity Id to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entities"
        "400":
          description: Invalid ID supplied
        "404":
          description: Entity not found
    delete:
      tags:
        - entities
      summary: Delete an entity
      description: ""
      operationId: deleteEntity
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: entityId
          in: path
          description: Entity id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Entity not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Entities:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Entities"
      description: Entity object that needs to be added to the store
      required: true
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
    Datasets:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Entities:
      type: object
      required:
        - name
        - id
      properties:
        id:
          type: string
          length: 10
          pattern: '^\s{2}_\d{8}$'
        name:
          type: string
          example: Samsung Electronics
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/Datasets"
        country:
          type: string
          description: Iso country of the entity
          example: FR
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
